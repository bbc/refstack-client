#!/usr/bin/env python
#
# Copyright (c) 2014 Piston Cloud Computing, Inc. All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#


"""
Run Tempest and upload results to Refstack.

This module runs the Tempest test suite on an OpenStack environment given a
Tempest configuration file.

"""

import argparse
import logging
import os
import requests
import subprocess


class RefstackClient:
    log_format = "%(asctime)s %(name)s %(levelname)s %(message)s"

    def __init__(self, args):
        '''Prepare a tempest test against a cloud.'''
        self.logger = logging.getLogger("refstack_client")
        self.console_log_handle = logging.StreamHandler()
        self.console_log_handle.setFormatter(
            logging.Formatter(self.log_format))
        self.logger.addHandler(self.console_log_handle)

        if args.verbose > 1:
            self.logger.setLevel(logging.DEBUG)
        elif args.verbose == 1:
            self.logger.setLevel(logging.INFO)
        else:
            self.logger.setLevel(logging.ERROR)

        # assign local vars to match args
        self.url = args.url
        self.tempest_dir = args.tempest_dir
        self.tempest_script = os.path.join(self.tempest_dir, 'run_tempest.sh')
        self.test_cases = args.test_cases
        self.verbose = args.verbose

        # Check that the config file exists.
        if not os.path.isfile(args.conf_file):
            self.logger.error("File not valid: %s" % args.conf_file)
            exit()

        self.conf_file = args.conf_file
        self.results_file = self._get_subunit_output_file()

    def post_results(self):
        '''Post the combined results back to the server.'''

        # TODO(cdiep): This method needs to generate results in a format
        # defined in https://review.openstack.org/#/c/105901/, and post those
        # results using the v1 API.

        self.logger.info('Sending the Tempest test results to the Refstack '
                         'API server.')

    def _get_subunit_output_file(self):
        '''This method reads from the next-stream file in the .testrepository
           directory of the given Tempest path. The integer here is the name
           of the file where subunit output will be saved to.'''
        try:
            subunit_file = open(os.path.join(
                                self.tempest_dir, '.testrepository',
                                'next-stream'), 'r').read()
        except (IOError, OSError):
            self.logger.debug('The .testrepository/next-stream file was not '
                              'found. Assuming subunit results will be stored '
                              'in file 0.')

            # Testr saves the first test stream to .testrepository/0 when
            # there is a newly generated .testrepository directory.
            subunit_file = "0"

        return os.path.join(self.tempest_dir, '.testrepository', subunit_file)

    def run(self):
        '''Execute tempest test against the cloud.'''
        try:
            self.logger.info("Starting Tempest test...")

            # Run the tempest script, specifying the output_conf file and the
            # flag telling it to not use a virtual environment.
            cmd = (self.tempest_script, '-C', self.conf_file, '-N')

            # Add the tempest test cases to test as arguments.
            if self.test_cases:
                cmd += ('--', self.test_cases)

            # If there were two verbose flags, show tempest results.
            if self.verbose > 1:
                stderr = None
            else:
                # Suppress tempest results output. Note that testr prints
                # results to stderr.
                stderr = open(os.devnull, 'w')

            # Execute the tempest test script in a subprocess.
            process = subprocess.Popen(cmd, stderr=stderr)
            process.communicate()

            # TODO(cdiep): Enable post_test_result once the code is ready.
            # self.post_results()

            self.logger.info('Tempest test complete.')
            self.logger.debug('Subunit results located in: %s' %
                              self.results_file)

        except subprocess.CalledProcessError as e:
            self.logger.error('%s failed to complete' % (e))


if __name__ == '__main__':
    ''' Generate tempest.conf from a tempest.conf.sample and then run test.'''
    parser = argparse.ArgumentParser(description='Starts a tempest test',
                                     formatter_class=argparse.
                                     ArgumentDefaultsHelpFormatter)

    parser.add_argument('-v', '--verbose',
                        action='count',
                        help='Show verbose output. Note that -vv will show '
                             'Tempest test result output.')

    parser.add_argument('--url',
                        action='store',
                        required=False,
                        default='https://api.refstack.org',
                        type=str,
                        help='Refstack API URL to post results to (e.g. --url '
                             'https://127.0.0.1:8000).')

    parser.add_argument('--tempest-dir',
                        action='store',
                        required=False,
                        dest='tempest_dir',
                        default='test_runner/src/tempest',
                        help='Path of the tempest project directory.')

    parser.add_argument('-c', '--conf-file',
                        action='store',
                        required=True,
                        dest='conf_file',
                        type=str,
                        help='Path of the tempest configuration file to use.')

    parser.add_argument('-t', '--test-cases',
                        action='store',
                        required=False,
                        dest='test_cases',
                        type=str,
                        help='Specify a subset of test cases to run '
                             '(e.g. --test-cases tempest.api.compute).')

    args = parser.parse_args()

    test = RefstackClient(args)
    test.run()
